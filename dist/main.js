(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>U});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),d=t(667),s=t.n(d),c=new URL(t(419),t.b),l=new URL(t(345),t.b),u=new URL(t(549),t.b),A=new URL(t(701),t.b),g=new URL(t(865),t.b),p=new URL(t(518),t.b),m=new URL(t(909),t.b),f=new URL(t(203),t.b),h=new URL(t(875),t.b),b=new URL(t(820),t.b),C=new URL(t(309),t.b),v=new URL(t(523),t.b),x=i()(o()),w=s()(c),I=s()(l),y=s()(u),B=s()(A),k=s()(g),T=s()(p),D=s()(m),E=s()(f),S=s()(h),j=s()(b),M=s()(C),L=s()(v);x.push([e.id,"body {\n    background-color: rgb(1, 65, 46);\n    margin: 0;\n}\n\n#content {\n    display: grid;\n    grid-template-columns: 250px minmax(580px,1fr);\n    grid-template-rows: 50px minmax(100vh,1000px);\n    color: white;\n}\n\n#content.hide-sidebar {\n    transition: 0.15s;\n    grid-template-columns: 0 minmax(580px,1fr);\n}\n\n#sidebar {\n    grid-row: 2/3;\n    grid-column: 1/2;\n    padding-top: 30px;\n    background-color: rgb(1, 65, 54);\n    left: 0;\n    top: 50px;\n}\n\n#sidebar.hidden {\n    position: absolute;\n    top: 50px;\n    left: -250px;\n    width: 250px;\n    height: 100vh;\n    transition: 0.15s;\n}\n\n.sidebar-item {\n    margin: 0 30px 15px 30px;\n    display: flex;\n    font-size: 16px;\n    \n}\n\n.sidebar-item:hover:not(.selected) {\n    filter: brightness(0) drop-shadow(0 0 3px red) invert(1);\n}\n\n#sidebar .selected {\n    background-color: rgba(1, 65, 54, 0.151);\n    filter: drop-shadow(0 0 5px rgb(175, 175, 175));\n    border-radius: 10px;\n}\n\n.sidebar-text {\n    align-self: center;\n    margin-left: 10px;\n    overflow: auto;\n}\n\n.sidebar-icon {\n    width: 25px;\n    height: 25px;\n    filter: brightness(0) invert(1);\n}\n\n.sidebar-category {\n    margin: 0 auto 20px 30px;\n    font-size: 16px;\n    font-style: italic;\n    font-weight: bold;\n    color: rgba(235, 235, 235, 0.685);\n}\n\n.sidebar-project-item {\n    padding-left: 30px;\n}\n\n.sidebar-project {\n    margin: 0 5px 10px 30px;\n    display: grid;\n    grid-template-columns: 30px 158px 27px;\n    font-size: 17px;\n}\n\n.icon-project{\n    background: url("+w+");\n    background-size: 25px;\n}\n\n.sidebar-project.selected .icon-project {\n    background: url("+I+");\n    background-size: 25px;\n}\n\n.sidebar-project-remove {\n    border: none;\n    width: 25px;\n    height: 25px;\n    filter: brightness(0) invert(1);\n}\n\n.sidebar-project-remove:hover{\n    filter: drop-shadow(0 0 3px red) invert(1);\n}\n\n.sidebar-tag {\n    margin: 0 30px 30px 30px;\n    display: flex;\n    font-size: 17px;\n}\n\n.sidebar-tag:hover {\n    filter: brightness(0) drop-shadow(0 0 3px red) invert(1);\n}\n\n.sidebar-separator {\n    background-color: rgba(194, 194, 194, 0.24);\n    height: 2px;\n    margin: 0 30px 15px 30px;\n    display: flex;\n}\n\n#form-add-project {\n    margin: 0 10px 15px 30px;\n    display: grid;\n    grid-template-columns: minmax(170px,1fr) 20px;\n}\n\n#form-add-project #name {\n    height: 20px;\n}\n\n#form-add-project #submit {\n    height: 26px;\n}\n\n#form-add-project input {\n    background-color: rgba(0, 61, 43, 0.637);\n    color: white;\n    border: 2px inset rgb(0, 177, 124);\n    border-radius: 5px;\n} \n\n#form-add-project #submit:active {\n    border: none;\n}\n\n#form-add-project input:hover, select:hover {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n#form-add-project input:focus, select:focus {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n.icon-today {\n    background: url("+y+");\n    background-size: 25px;\n}\n.icon-upcoming {\n    background: url("+B+");\n    background-size: 25px;\n}\n.icon-highpriority {\n    background: url("+k+");\n    background-size: 25px;\n}\n\n\n#header {\n    grid-row: 1/2;\n    grid-column: 1/3;\n    display: grid;\n    grid-template-columns: 45px 1fr 45px;\n    padding: 10px;\n    background-color: rgb(0, 58, 36);\n}\n\n.header-button {\n    all: unset;\n    width: 25px;\n    height: 25px;\n    filter: invert(1);\n    background: url("+T+");\n    background-size: 25px;\n    \n}\n\n.header-button:hover {\n    filter: brightness(0) drop-shadow(0 0 3px red) invert(1);\n}\n\n.header-button.icon-menu {\n    align-self: center;\n    margin-left: 20px;\n}\n\n.header-title {\n    grid-column: 2/3;\n    margin-left: 20px;\n    align-self: center;\n}\n\n.header-button.icon-settings {\n    align-self: center;\n    grid-column: 3/4;\n}\n\n.icon-menu {\n    background: url("+D+");\n    background-size: 25px;\n}\n.icon-settings {\n    background: url("+E+");\n    background-size: 25px;\n}\n\n#mainview {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    padding: 20px;\n    background-color: rgb(0, 80, 56);\n    display: grid;\n    grid-template-rows: 130px 1fr;\n}\n\n#mainview form {\n    grid-row: 2/3;\n    display: grid;\n    gap: 2px;\n    grid-template-columns: minmax(80px,1fr) 120px 100px 90px 90px;\n}\n\n#add-todo-box {\n    display: grid;\n    grid-template-rows: 30px 30px;\n    grid-row: 1/2;\n}\n\n#add-todo-box .title {\n    grid-row: 1/2;\n    font-style: italic;\n}\n\n#form-add-todo select {\n    background-color: rgba(0, 61, 43, 0.637);\n    color: white;\n    border: 2px inset rgb(0, 177, 124);\n    border-radius: 5px;\n    height: 36px;\n}\n#form-add-todo input {\n    background-color: rgba(0, 61, 43, 0.637);\n    color: white;\n    border: 2px inset rgb(0, 177, 124);\n    border-radius: 5px;\n    height: 30px;\n}\n\n#form-add-todo input:hover, select:hover {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n#form-add-todo input:focus, select:focus {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n#form-add-todo #submit {\n    height: 36px;\n}\n\n#form-add-todo #submit:active {\n    border: none;\n}\n\n#form-add-todo #desc {\n    grid-column: 1/6;\n}\n\n#todoview {\n    grid-row: 2/3;\n    display: grid;\n    grid-template-rows: 25px 1fr;\n}\n\n#todoview .labels {\n    display: grid;\n    grid-template-columns: minmax(170px,1fr) 125px 90px 70px;\n    font-style: italic;\n    margin-bottom: 10px;\n    padding: 0 10px;\n    grid-row: 1/2;\n}\n\n#todobox {\n    grid-row: 2/3;\n    height: 800px;\n    overflow: auto;\n}\n\n.todo-item {\n    display: grid;\n    grid-template-columns: minmax(170px,1fr) 125px 90px 70px;\n    grid-template-rows: 25px 5px;\n    margin-bottom: 10px;\n    border: 2px solid rgb(2, 160, 62);\n    border-radius: 10px;\n    padding: 10px;\n    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.295);\n    background-color: rgb(1, 65, 46);\n    user-select: none;\n}\n\n.todo-item * {\n    user-select: text;\n}\n\n.todo-item.completed {\n    border: 2px solid rgba(128, 128, 128, 0);\n    background-color: rgb(29, 54, 47);\n    box-shadow: none;\n    filter: opacity(50%);\n}\n\n.todo-description {\n    overflow: hidden;\n    visibility: visible;\n    height: 60px;\n    padding-top: 10px;\n    transition: 0.15s;\n    font-size: 12px;\n    grid-column: 1/5;\n}\n\n.todo-description.hidden {\n    visibility: hidden;\n    padding-top: 0;\n    height: 0px;\n    transition: 0.15s;\n}\n\n.todo-name {\n    font-size: 16px;\n    text-align: left;\n    align-self: center;\n    margin-right: auto;\n}\n\n.todo-duedate {\n    font-size: 14px;\n    align-self: center;\n    text-align: left;\n    margin-right: auto;\n}\n\n.todo-priority {\n    text-align: left;\n    align-self: center;\n    margin-right: auto;\n}\n\n.todo-actions {\n    display: grid;\n    grid-template-columns: repeat(3, 40px);\n}\n\n.todo-actions button {\n    border: none;\n    width: 25px;\n    height: 25px;\n    filter: brightness(0) invert(1);\n}\n\n.todo-actions button:hover {\n    filter: drop-shadow(0 0 3px red) invert(1);\n}\n\n.todo-project {\n    grid-column: 1/2;\n    grid-row: 2/3;\n    font-size: 11px;\n    color: rgb(162, 255, 162);\n    margin-top: -3px;\n}\n\n.icon-edit {\n    background-color: blue;\n    background: url("+S+");\n    background-size: 25px;\n}\n.icon-checkbox {\n    background: url("+j+");\n    background-size: 25px;\n}\n.icon-delete {\n    background: url("+M+");\n    background-size: 25px;\n}\n\n.todo-item.completed .icon-checkbox {\n    background: url("+L+");\n    background-size: 25px;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,gCAAgC;IAChC,SAAS;AACb;;AAEA;IACI,aAAa;IACb,8CAA8C;IAC9C,6CAA6C;IAC7C,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,0CAA0C;AAC9C;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,iBAAiB;IACjB,gCAAgC;IAChC,OAAO;IACP,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,iBAAiB;AACrB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,eAAe;;AAEnB;;AAEA;IACI,wDAAwD;AAC5D;;AAEA;IACI,wCAAwC;IACxC,+CAA+C;IAC/C,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,+BAA+B;AACnC;;AAEA;IACI,wBAAwB;IACxB,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,iCAAiC;AACrC;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,eAAe;AACnB;;AAEA;IACI,mDAA4C;IAC5C,qBAAqB;AACzB;;AAEA;IACI,mDAAwC;IACxC,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,+BAA+B;AACnC;;AAEA;IACI,0CAA0C;AAC9C;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,wDAAwD;AAC5D;;AAEA;IACI,2CAA2C;IAC3C,WAAW;IACX,wBAAwB;IACxB,aAAa;AACjB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,6CAA6C;AACjD;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,wCAAwC;IACxC,YAAY;IACZ,kCAAkC;IAClC,kBAAkB;AACtB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,mDAAkC;IAClC,qBAAqB;AACzB;AACA;IACI,mDAAqC;IACrC,qBAAqB;AACzB;AACA;IACI,mDAA0C;IAC1C,qBAAqB;AACzB;;;AAGA;IACI,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,oCAAoC;IACpC,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,UAAU;IACV,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,mDAAiC;IACjC,qBAAqB;;AAEzB;;AAEA;IACI,wDAAwD;AAC5D;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,mDAAiC;IACjC,qBAAqB;AACzB;AACA;IACI,mDAAqC;IACrC,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,gCAAgC;IAChC,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,QAAQ;IACR,6DAA6D;AACjE;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,wCAAwC;IACxC,YAAY;IACZ,kCAAkC;IAClC,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,wCAAwC;IACxC,YAAY;IACZ,kCAAkC;IAClC,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,wDAAwD;IACxD,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,wDAAwD;IACxD,4BAA4B;IAC5B,mBAAmB;IACnB,iCAAiC;IACjC,mBAAmB;IACnB,aAAa;IACb,4CAA4C;IAC5C,gCAAgC;IAChC,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,wCAAwC;IACxC,iCAAiC;IACjC,gBAAgB;IAChB,oBAAoB;AACxB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sCAAsC;AAC1C;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,+BAA+B;AACnC;;AAEA;IACI,0CAA0C;AAC9C;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,eAAe;IACf,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,sBAAsB;IACtB,mDAAiC;IACjC,qBAAqB;AACzB;AACA;IACI,mDAAwC;IACxC,qBAAqB;AACzB;AACA;IACI,oDAAmC;IACnC,qBAAqB;AACzB;;AAEA;IACI,oDAAyC;IACzC,qBAAqB;AACzB",sourcesContent:["body {\n    background-color: rgb(1, 65, 46);\n    margin: 0;\n}\n\n#content {\n    display: grid;\n    grid-template-columns: 250px minmax(580px,1fr);\n    grid-template-rows: 50px minmax(100vh,1000px);\n    color: white;\n}\n\n#content.hide-sidebar {\n    transition: 0.15s;\n    grid-template-columns: 0 minmax(580px,1fr);\n}\n\n#sidebar {\n    grid-row: 2/3;\n    grid-column: 1/2;\n    padding-top: 30px;\n    background-color: rgb(1, 65, 54);\n    left: 0;\n    top: 50px;\n}\n\n#sidebar.hidden {\n    position: absolute;\n    top: 50px;\n    left: -250px;\n    width: 250px;\n    height: 100vh;\n    transition: 0.15s;\n}\n\n.sidebar-item {\n    margin: 0 30px 15px 30px;\n    display: flex;\n    font-size: 16px;\n    \n}\n\n.sidebar-item:hover:not(.selected) {\n    filter: brightness(0) drop-shadow(0 0 3px red) invert(1);\n}\n\n#sidebar .selected {\n    background-color: rgba(1, 65, 54, 0.151);\n    filter: drop-shadow(0 0 5px rgb(175, 175, 175));\n    border-radius: 10px;\n}\n\n.sidebar-text {\n    align-self: center;\n    margin-left: 10px;\n    overflow: auto;\n}\n\n.sidebar-icon {\n    width: 25px;\n    height: 25px;\n    filter: brightness(0) invert(1);\n}\n\n.sidebar-category {\n    margin: 0 auto 20px 30px;\n    font-size: 16px;\n    font-style: italic;\n    font-weight: bold;\n    color: rgba(235, 235, 235, 0.685);\n}\n\n.sidebar-project-item {\n    padding-left: 30px;\n}\n\n.sidebar-project {\n    margin: 0 5px 10px 30px;\n    display: grid;\n    grid-template-columns: 30px 158px 27px;\n    font-size: 17px;\n}\n\n.icon-project{\n    background: url(./icons/line_horizontal.svg);\n    background-size: 25px;\n}\n\n.sidebar-project.selected .icon-project {\n    background: url(./icons/arrow_right.svg);\n    background-size: 25px;\n}\n\n.sidebar-project-remove {\n    border: none;\n    width: 25px;\n    height: 25px;\n    filter: brightness(0) invert(1);\n}\n\n.sidebar-project-remove:hover{\n    filter: drop-shadow(0 0 3px red) invert(1);\n}\n\n.sidebar-tag {\n    margin: 0 30px 30px 30px;\n    display: flex;\n    font-size: 17px;\n}\n\n.sidebar-tag:hover {\n    filter: brightness(0) drop-shadow(0 0 3px red) invert(1);\n}\n\n.sidebar-separator {\n    background-color: rgba(194, 194, 194, 0.24);\n    height: 2px;\n    margin: 0 30px 15px 30px;\n    display: flex;\n}\n\n#form-add-project {\n    margin: 0 10px 15px 30px;\n    display: grid;\n    grid-template-columns: minmax(170px,1fr) 20px;\n}\n\n#form-add-project #name {\n    height: 20px;\n}\n\n#form-add-project #submit {\n    height: 26px;\n}\n\n#form-add-project input {\n    background-color: rgba(0, 61, 43, 0.637);\n    color: white;\n    border: 2px inset rgb(0, 177, 124);\n    border-radius: 5px;\n} \n\n#form-add-project #submit:active {\n    border: none;\n}\n\n#form-add-project input:hover, select:hover {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n#form-add-project input:focus, select:focus {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n.icon-today {\n    background: url(./icons/today.svg);\n    background-size: 25px;\n}\n.icon-upcoming {\n    background: url(./icons/upcoming.svg);\n    background-size: 25px;\n}\n.icon-highpriority {\n    background: url(./icons/high_priority.svg);\n    background-size: 25px;\n}\n\n\n#header {\n    grid-row: 1/2;\n    grid-column: 1/3;\n    display: grid;\n    grid-template-columns: 45px 1fr 45px;\n    padding: 10px;\n    background-color: rgb(0, 58, 36);\n}\n\n.header-button {\n    all: unset;\n    width: 25px;\n    height: 25px;\n    filter: invert(1);\n    background: url(./icons/icon.svg);\n    background-size: 25px;\n    \n}\n\n.header-button:hover {\n    filter: brightness(0) drop-shadow(0 0 3px red) invert(1);\n}\n\n.header-button.icon-menu {\n    align-self: center;\n    margin-left: 20px;\n}\n\n.header-title {\n    grid-column: 2/3;\n    margin-left: 20px;\n    align-self: center;\n}\n\n.header-button.icon-settings {\n    align-self: center;\n    grid-column: 3/4;\n}\n\n.icon-menu {\n    background: url(./icons/menu.svg);\n    background-size: 25px;\n}\n.icon-settings {\n    background: url(./icons/settings.svg);\n    background-size: 25px;\n}\n\n#mainview {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    padding: 20px;\n    background-color: rgb(0, 80, 56);\n    display: grid;\n    grid-template-rows: 130px 1fr;\n}\n\n#mainview form {\n    grid-row: 2/3;\n    display: grid;\n    gap: 2px;\n    grid-template-columns: minmax(80px,1fr) 120px 100px 90px 90px;\n}\n\n#add-todo-box {\n    display: grid;\n    grid-template-rows: 30px 30px;\n    grid-row: 1/2;\n}\n\n#add-todo-box .title {\n    grid-row: 1/2;\n    font-style: italic;\n}\n\n#form-add-todo select {\n    background-color: rgba(0, 61, 43, 0.637);\n    color: white;\n    border: 2px inset rgb(0, 177, 124);\n    border-radius: 5px;\n    height: 36px;\n}\n#form-add-todo input {\n    background-color: rgba(0, 61, 43, 0.637);\n    color: white;\n    border: 2px inset rgb(0, 177, 124);\n    border-radius: 5px;\n    height: 30px;\n}\n\n#form-add-todo input:hover, select:hover {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n#form-add-todo input:focus, select:focus {\n    outline: 1px solid rgb(0, 255, 115);\n}\n\n#form-add-todo #submit {\n    height: 36px;\n}\n\n#form-add-todo #submit:active {\n    border: none;\n}\n\n#form-add-todo #desc {\n    grid-column: 1/6;\n}\n\n#todoview {\n    grid-row: 2/3;\n    display: grid;\n    grid-template-rows: 25px 1fr;\n}\n\n#todoview .labels {\n    display: grid;\n    grid-template-columns: minmax(170px,1fr) 125px 90px 70px;\n    font-style: italic;\n    margin-bottom: 10px;\n    padding: 0 10px;\n    grid-row: 1/2;\n}\n\n#todobox {\n    grid-row: 2/3;\n    height: 800px;\n    overflow: auto;\n}\n\n.todo-item {\n    display: grid;\n    grid-template-columns: minmax(170px,1fr) 125px 90px 70px;\n    grid-template-rows: 25px 5px;\n    margin-bottom: 10px;\n    border: 2px solid rgb(2, 160, 62);\n    border-radius: 10px;\n    padding: 10px;\n    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.295);\n    background-color: rgb(1, 65, 46);\n    user-select: none;\n}\n\n.todo-item * {\n    user-select: text;\n}\n\n.todo-item.completed {\n    border: 2px solid rgba(128, 128, 128, 0);\n    background-color: rgb(29, 54, 47);\n    box-shadow: none;\n    filter: opacity(50%);\n}\n\n.todo-description {\n    overflow: hidden;\n    visibility: visible;\n    height: 60px;\n    padding-top: 10px;\n    transition: 0.15s;\n    font-size: 12px;\n    grid-column: 1/5;\n}\n\n.todo-description.hidden {\n    visibility: hidden;\n    padding-top: 0;\n    height: 0px;\n    transition: 0.15s;\n}\n\n.todo-name {\n    font-size: 16px;\n    text-align: left;\n    align-self: center;\n    margin-right: auto;\n}\n\n.todo-duedate {\n    font-size: 14px;\n    align-self: center;\n    text-align: left;\n    margin-right: auto;\n}\n\n.todo-priority {\n    text-align: left;\n    align-self: center;\n    margin-right: auto;\n}\n\n.todo-actions {\n    display: grid;\n    grid-template-columns: repeat(3, 40px);\n}\n\n.todo-actions button {\n    border: none;\n    width: 25px;\n    height: 25px;\n    filter: brightness(0) invert(1);\n}\n\n.todo-actions button:hover {\n    filter: drop-shadow(0 0 3px red) invert(1);\n}\n\n.todo-project {\n    grid-column: 1/2;\n    grid-row: 2/3;\n    font-size: 11px;\n    color: rgb(162, 255, 162);\n    margin-top: -3px;\n}\n\n.icon-edit {\n    background-color: blue;\n    background: url(./icons/edit.svg);\n    background-size: 25px;\n}\n.icon-checkbox {\n    background: url(./icons/checkbox_no.svg);\n    background-size: 25px;\n}\n.icon-delete {\n    background: url(./icons/delete.svg);\n    background-size: 25px;\n}\n\n.todo-item.completed .icon-checkbox {\n    background: url(./icons/checkbox_yes.svg);\n    background-size: 25px;\n}"],sourceRoot:""}]);const U=x},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],d=0;d<e.length;d++){var s=e[d],c=r.base?s[0]+r.base:s[0],l=a[c]||0,u="".concat(c," ").concat(l);a[c]=l+1;var A=t(u),g={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(g);else{var p=o(g,r);r.byIndex=d,n.splice(d,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=t(a[i]);n[d].references--}for(var s=r(e,o),c=0;c<a.length;c++){var l=t(a[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},345:(e,n,t)=>{e.exports=t.p+"b27c783b409fb1613644.svg"},820:(e,n,t)=>{e.exports=t.p+"5601cf05d5c33e918e48.svg"},523:(e,n,t)=>{e.exports=t.p+"800ffe3eaefa86f67ae0.svg"},309:(e,n,t)=>{e.exports=t.p+"3270f2c93c8c138fa6cc.svg"},875:(e,n,t)=>{e.exports=t.p+"5b4bbee2e91b8855115c.svg"},865:(e,n,t)=>{e.exports=t.p+"2a1829847c7931411029.svg"},518:(e,n,t)=>{e.exports=t.p+"db880e01a83d878a9455.svg"},419:(e,n,t)=>{e.exports=t.p+"651922161c28a7debbee.svg"},909:(e,n,t)=>{e.exports=t.p+"113d59e2703636dfe157.svg"},203:(e,n,t)=>{e.exports=t.p+"b06737d8c8a93744b27e.svg"},549:(e,n,t)=>{e.exports=t.p+"f24e6657183c1ddb4442.svg"},701:(e,n,t)=>{e.exports=t.p+"327527f1c390104cf021.svg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),d=t(565),s=t.n(d),c=t(216),l=t.n(c),u=t(589),A=t.n(u),g=t(28),p={};function m(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function h(e){return m(1,arguments),e instanceof Date||"object"===f(e)&&"[object Date]"===Object.prototype.toString.call(e)}function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function C(e){m(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===b(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(e){if(m(1,arguments),!h(e)&&"number"!=typeof e)return!1;var n=C(e);return!isNaN(Number(n))}function x(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function w(e,n){m(2,arguments);var t=C(e).getTime(),r=x(n);return new Date(t+r)}function I(e,n){m(2,arguments);var t=x(n);return w(e,-t)}p.styleTagTransform=A(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=l(),n()(g.Z,p),g.Z&&g.Z.locals&&g.Z.locals;var y=864e5;function B(e){m(1,arguments);var n=1,t=C(e),r=t.getUTCDay(),o=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function k(e){m(1,arguments);var n=C(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=B(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=B(a);return n.getTime()>=o.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function T(e){m(1,arguments);var n=k(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=B(t);return r}var D=6048e5,E={};function S(){return E}function j(e,n){var t,r,o,a,i,d,s,c;m(1,arguments);var l=S(),u=x(null!==(t=null!==(r=null!==(o=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=C(e),g=A.getUTCDay(),p=(g<u?7:0)+g-u;return A.setUTCDate(A.getUTCDate()-p),A.setUTCHours(0,0,0,0),A}function M(e,n){var t,r,o,a,i,d,s,c;m(1,arguments);var l=C(e),u=l.getUTCFullYear(),A=S(),g=x(null!==(t=null!==(r=null!==(o=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(u+1,0,g),p.setUTCHours(0,0,0,0);var f=j(p,n),h=new Date(0);h.setUTCFullYear(u,0,g),h.setUTCHours(0,0,0,0);var b=j(h,n);return l.getTime()>=f.getTime()?u+1:l.getTime()>=b.getTime()?u:u-1}function L(e,n){var t,r,o,a,i,d,s,c;m(1,arguments);var l=S(),u=x(null!==(t=null!==(r=null!==(o=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),A=M(e,n),g=new Date(0);g.setUTCFullYear(A,0,u),g.setUTCHours(0,0,0,0);var p=j(g,n);return p}var U=6048e5;function Y(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const N=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return Y("yy"===n?r%100:r,n.length)},z=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):Y(t+1,2)},P=function(e,n){return Y(e.getUTCDate(),n.length)},q=function(e,n){return Y(e.getUTCHours()%12||12,n.length)},W=function(e,n){return Y(e.getUTCHours(),n.length)},O=function(e,n){return Y(e.getUTCMinutes(),n.length)},H=function(e,n){return Y(e.getUTCSeconds(),n.length)},F=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return Y(Math.floor(r*Math.pow(10,t-3)),n.length)};var R={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return N(e,n)},Y:function(e,n,t,r){var o=M(e,r),a=o>0?o:1-o;return"YY"===n?Y(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):Y(a,n.length)},R:function(e,n){return Y(k(e),n.length)},u:function(e,n){return Y(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return Y(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return Y(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return z(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return Y(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=function(e,n){m(1,arguments);var t=C(e),r=j(t,n).getTime()-L(t,n).getTime();return Math.round(r/U)+1}(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):Y(o,n.length)},I:function(e,n,t){var r=function(e){m(1,arguments);var n=C(e),t=B(n).getTime()-T(n).getTime();return Math.round(t/D)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):Y(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):P(e,n)},D:function(e,n,t){var r=function(e){m(1,arguments);var n=C(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),o=t-r;return Math.floor(o/y)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):Y(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return Y(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return Y(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return Y(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return q(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):W(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):Y(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):Y(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):O(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):H(e,n)},S:function(e,n){return F(e,n)},X:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return X(o);case"XXXX":case"XX":return Q(o);default:return Q(o,":")}},x:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return X(o);case"xxxx":case"xx":return Q(o);default:return Q(o,":")}},O:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+Z(o,":");default:return"GMT"+Q(o,":")}},z:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+Z(o,":");default:return"GMT"+Q(o,":")}},t:function(e,n,t,r){var o=r._originalDate||e;return Y(Math.floor(o.getTime()/1e3),n.length)},T:function(e,n,t,r){return Y((r._originalDate||e).getTime(),n.length)}};function Z(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=n||"";return t+String(o)+i+Y(a,2)}function X(e,n){return e%60==0?(e>0?"-":"+")+Y(Math.abs(e)/60,2):Q(e,n)}function Q(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+Y(Math.floor(o/60),2)+t+Y(o%60,2)}const G=R;var _=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},J=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const $={p:J,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return _(e,n);switch(o){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",_(o,n)).replace("{{time}}",J(a,n))}};function V(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var K=["D","DD"],ee=["YY","YYYY"];function ne(e){return-1!==K.indexOf(e)}function te(e){return-1!==ee.indexOf(e)}function re(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var oe={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ae(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}const ie={date:ae({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ae({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ae({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var de={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function se(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,d=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[d]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const ce={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:se({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:se({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:se({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:se({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:se({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function le(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=n.match(o);if(!a)return null;var i,d=a[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?Ae(s,(function(e){return e.test(d)})):ue(s,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(c):c,i=t.valueCallback?t.valueCallback(i):i;var l=n.slice(d.length);return{value:i,rest:l}}}function ue(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function Ae(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var ge,pe={ordinalNumber:(ge={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(ge.matchPattern);if(!t)return null;var r=t[0],o=e.match(ge.parsePattern);if(!o)return null;var a=ge.valueCallback?ge.valueCallback(o[0]):o[0];a=n.valueCallback?n.valueCallback(a):a;var i=e.slice(r.length);return{value:a,rest:i}}),era:le({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:le({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:le({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:le({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:le({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const me={code:"en-US",formatDistance:function(e,n,t){var r,o=oe[e];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:ie,formatRelative:function(e,n,t,r){return de[e]},localize:ce,match:pe,options:{weekStartsOn:0,firstWeekContainsDate:1}};var fe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,he=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,be=/^'([^]*?)'?$/,Ce=/''/g,ve=/[a-zA-Z]/;function xe(e,n,t){var r,o,a,i,d,s,c,l,u,A,g,p,f,h,b,w,y,B;m(2,arguments);var k=String(n),T=S(),D=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:T.locale)&&void 0!==r?r:me,E=x(null!==(a=null!==(i=null!==(d=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==d?d:T.firstWeekContainsDate)&&void 0!==i?i:null===(u=T.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=x(null!==(g=null!==(p=null!==(f=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(b=t.locale)||void 0===b||null===(w=b.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:T.weekStartsOn)&&void 0!==p?p:null===(y=T.locale)||void 0===y||null===(B=y.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==g?g:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var M=C(e);if(!v(M))throw new RangeError("Invalid time value");var L=V(M),U=I(M,L),Y={firstWeekContainsDate:E,weekStartsOn:j,locale:D,_originalDate:M},N=k.match(he).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,$[n])(e,D.formatLong):e})).join("").match(fe).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return we(r);var a=G[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!te(r)||re(r,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!ne(r)||re(r,n,String(e)),a(U,r,D.localize,Y);if(o.match(ve))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return N}function we(e){var n=e.match(be);return n?n[1].replace(Ce,"'"):e}function Ie(e){m(1,arguments);var n=C(e);return n.setHours(0,0,0,0),n}function ye(e,n){m(2,arguments);var t=Ie(e),r=Ie(n);return t.getTime()===r.getTime()}function Be(e){return m(1,arguments),ye(e,Date.now())}function ke(e,n){m(2,arguments);var t=C(e),r=C(n),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}Math.pow(10,8);var Te=36e5;function De(e,n){var t;m(1,arguments);var r=x(null!==(t=null==n?void 0:n.additionalDigits)&&void 0!==t?t:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,a=Le(e);if(a.date){var i=Ue(a.date,r);o=Ye(i.restDateString,i.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var d,s=o.getTime(),c=0;if(a.time&&(c=ze(a.time),isNaN(c)))return new Date(NaN);if(!a.timezone){var l=new Date(s+c),u=new Date(0);return u.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),u.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),u}return d=qe(a.timezone),isNaN(d)?new Date(NaN):new Date(s+c+d)}var Ee={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Se=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,je=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Me=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Le(e){var n,t={},r=e.split(Ee.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?n=r[0]:(t.date=r[0],n=r[1],Ee.timeZoneDelimiter.test(t.date)&&(t.date=e.split(Ee.timeZoneDelimiter)[0],n=e.substr(t.date.length,e.length))),n){var o=Ee.timezone.exec(n);o?(t.time=n.replace(o[1],""),t.timezone=o[1]):t.time=n}return t}function Ue(e,n){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}function Ye(e,n){if(null===n)return new Date(NaN);var t=e.match(Se);if(!t)return new Date(NaN);var r=!!t[4],o=Ne(t[1]),a=Ne(t[2])-1,i=Ne(t[3]),d=Ne(t[4]),s=Ne(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,d,s)?function(e,n,t){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(n,d,s):new Date(NaN);var c=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=(We[n]||(Oe(e)?29:28))}(n,a,i)&&function(e,n){return n>=1&&n<=(Oe(e)?366:365)}(n,o)?(c.setUTCFullYear(n,a,Math.max(o,i)),c):new Date(NaN)}function Ne(e){return e?parseInt(e):1}function ze(e){var n=e.match(je);if(!n)return NaN;var t=Pe(n[1]),r=Pe(n[2]),o=Pe(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,o)?t*Te+6e4*r+1e3*o:NaN}function Pe(e){return e&&parseFloat(e.replace(",","."))||0}function qe(e){if("Z"===e)return 0;var n=e.match(Me);if(!n)return 0;var t="+"===n[1]?-1:1,r=parseInt(n[2]),o=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,o)?t*(r*Te+6e4*o):NaN}var We=[31,null,31,30,31,30,31,31,30,31,30,31];function Oe(e){return e%400==0||e%4==0&&e%100!=0}const He=e=>{let n=localStorage.getItem("IDcounter");null==n&&(localStorage.setItem("IDcounter",0),n=0);let t=localStorage.getItem("todoIDs");t=null==t?[]:t.split(",");const r=++n;e.id=r,localStorage.setItem("IDcounter",n),t.push(r),localStorage.setItem("todoIDs",t);const o={name:e.name,description:e.description,dueDate:e.dueDate,priority:e.priority,projectName:e.projectName,completed:e.completed,id:e.id};localStorage.setItem("todo"+r,JSON.stringify(o))},Fe=e=>{const n=e.id,t=e.name;let r=localStorage.getItem("todoIDs"),o=localStorage.getItem("projectIDs");o=o.split(",");let a=[];if(null!=r){r=r.split(",");for(let e=0;e<r.length;e++){const n=r[e];console.log("delete "+n+" from "+r),t==localStorage.getObj("todo"+n).projectName&&a.push(n)}for(let e=0;e<a.length;e++){const n=a[e];r.splice(r.indexOf(n),1),0==r.length?localStorage.removeItem("todoIDs"):localStorage.setItem("todoIDs",r),localStorage.removeItem("todo"+n)}}o.splice(o.indexOf(n),1),0==o.length?localStorage.removeItem("projectIDs"):localStorage.setItem("projectIDs",o),localStorage.removeItem("project"+n)},Re=e=>{const n=e.id.toString();let t=localStorage.getItem("todoIDs");t=t.split(","),console.log("delete "+n+" from "+t),t.splice(t.indexOf(n),1),0==t.length?localStorage.removeItem("todoIDs"):localStorage.setItem("todoIDs",t),localStorage.removeItem("todo"+n)};Storage.prototype.setObj=function(e,n){return this.setItem(e,JSON.stringify(n))},Storage.prototype.getObj=function(e){return JSON.parse(this.getItem(e))};const Ze=e=>{let n=[];return{name:e,addTodo:e=>{n.push(e)},removeTodo:e=>{for(let t=0;t<n.length;t++)n[t]==e&&n.splice(t,1)},getTodos:()=>n,id:null}},Xe=(e,n)=>{const t=e.querySelector(".sidebar-text").innerHTML;for(let e=0;e<n.length;e++)t==n[e].name&&(Fe(n[e]),n.splice(e,1))},Qe=e=>{const n=document.querySelector("#form-add-todo #project");n.innerHTML="";const t=document.createElement("option");t.setAttribute("value",""),t.setAttribute("disabled",""),t.setAttribute("selected",""),t.setAttribute("hidden",""),t.innerHTML="Project...",n.appendChild(t);for(let t=0;t<e.length;t++){const r=document.createElement("option");r.setAttribute("value",e[t].name),r.innerHTML=e[t].name,n.appendChild(r)}};let Ge=document.createElement("div");const _e=e=>{const n=document.getElementById("sidebar-projects");n.innerHTML="";for(let t=0;t<e.length;t++){const r=e[t],o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),d=document.createElement("button");o.classList.add("sidebar-project"),o.classList.add("sidebar-item"),o.id="sidebar-project-"+t,a.classList.add("icon-project"),a.classList.add("sidebar-icon"),i.classList.add("sidebar-text"),d.classList.add("sidebar-project-remove"),d.classList.add("icon-delete"),i.innerHTML=r.name,o.addEventListener("click",(e=>{e.target.classList.contains("sidebar-project-remove")||o.classList.contains("selected")||(Ge.classList.remove("selected"),Ge=o,o.classList.add("selected"),$e([r],"Project"))})),d.addEventListener("click",(()=>{document.querySelector("#form-add-project #name").setCustomValidity(""),Xe(o,e),$e(e,"Today"),Je(e)})),o.appendChild(a),o.appendChild(i),o.appendChild(d),n.appendChild(o)}},Je=e=>{_e(e),Qe(e)},$e=(e,n)=>{const t=document.getElementById("todoview");t.innerHTML="";const r=document.createElement("div");r.classList.add("labels");const o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),d=document.createElement("div");let s;o.classList.add("label-name"),a.classList.add("label-duedate"),i.classList.add("label-priority"),d.classList.add("label-actions"),o.innerHTML="Task",a.innerHTML="Due date",i.innerHTML="Priority",d.innerHTML="Actions",r.appendChild(o),r.appendChild(a),r.appendChild(i),r.appendChild(d),t.appendChild(r),"Today"==n?s=(e=>{let n=[];for(let t=0;t<e.length;t++){const r=e[t].getTodos();for(let e=0;e<r.length;e++)Be(r[e].dueDate)&&n.push(r[e])}return n})(e):"Upcoming"==n?s=(e=>{let n=[];for(let d=0;d<e.length;d++){const s=e[d].getTodos();for(let e=0;e<s.length;e++)ke((t=void 0,void 0,void 0,void 0,i=void 0,r=(t=new Date).getFullYear(),o=t.getMonth(),a=t.getDate(),(i=new Date(0)).setFullYear(r,o,a+1),i.setHours(0,0,0,0),i),s[e].dueDate)<=0&&n.push(s[e])}var t,r,o,a,i;return n})(e):"HighPriority"==n?s=(e=>{let n=[];for(let t=0;t<e.length;t++){const r=e[t].getTodos();for(let e=0;e<r.length;e++)"High"==r[e].priority&&n.push(r[e])}return n})(e):"Project"==n&&(s=e[0].getTodos());const c=document.createElement("div");c.setAttribute("id","todobox"),s.forEach((n=>{const t=document.createElement("div");t.classList.add("todo-item"),n.completed&&t.classList.add("completed"),t.addEventListener("click",(e=>{e.target==e.currentTarget&&(e=>{const n=e.getElementsByClassName("todo-description")[0];n.classList.contains("hidden")?n.classList.remove("hidden"):n.classList.add("hidden")})(t)}));const r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),d=document.createElement("div"),s=document.createElement("div");r.classList.add("todo-name"),o.classList.add("todo-duedate"),a.classList.add("todo-priority"),i.classList.add("todo-actions"),d.classList.add("todo-description"),d.classList.add("hidden"),s.classList.add("todo-project"),r.innerHTML=n.name,o.innerHTML=xe(n.dueDate,"dd.MM.yyyy"),a.innerHTML=n.priority,d.innerHTML=n.description,s.innerHTML=n.projectName;const l=document.createElement("button"),u=document.createElement("button");l.classList.add("todo-button"),u.classList.add("todo-button"),l.classList.add("icon-checkbox"),u.classList.add("icon-delete"),l.addEventListener("click",(t=>{(e=>{1==e.completed?e.completed=!1:e.completed=!0})(n),Ve(e)})),u.addEventListener("click",(t=>{((e,n)=>{for(let t=0;t<n.length;t++)n[t].name==e.projectName&&(Re(e),n[t].removeTodo(e))})(n,e),Ve(e)})),i.appendChild(l),i.appendChild(u),t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(i),t.appendChild(d),t.appendChild(s),c.appendChild(t)})),t.appendChild(c)},Ve=e=>{if("sidebar-today"==Ge.id)$e(e,"Today");else if("sidebar-upcoming"==Ge.id)$e(e,"Upcoming");else if("sidebar-highpriority"==Ge.id)$e(e,"HighPriority");else if(Ge.id.includes("sidebar-project-"))for(let n=0;n<e.length;n++)if(e[n].name==Ge.querySelector(".sidebar-text").innerHTML){$e([e[n]],"Project");break}},Ke=function(){document.querySelector("#form-add-todo #date").setAttribute("min",xe(Ie(Date.now()),"yyyy-MM-dd"));let e=(()=>{let e=[],n=localStorage.getItem("projectIDs"),t=localStorage.getItem("todoIDs");if(null==n)return-1;n=n.split(","),null!=t&&(t=t.split(","));for(let r=0;r<n.length;r++){const o=n[r],a=localStorage.getItem("project"+o);let i=Ze(a);if(i.id=o,null!=t)for(let e=0;e<t.length;e++){const n=t[e],r=localStorage.getObj("todo"+n);r.dueDate=De(r.dueDate),r.projectName==a&&(r.id=n,i.addTodo(r))}e.push(i)}return e})();return-1!=e&&null!=e||(e=[]),_e(e),Qe(e),Ge=document.getElementById("sidebar-today"),Ge.classList.add("selected"),$e(e,"Today"),e}();!function(){const e=document.getElementById("sidebar-today"),n=document.getElementById("sidebar-upcoming"),t=document.getElementById("sidebar-highpriority"),r=document.getElementById("sidebar-toggle");document.getElementById("form-add-todo").addEventListener("submit",(e=>{e.preventDefault(),((e,n)=>{const t={name:e.get("name"),description:e.get("desc"),dueDate:De(e.get("date")),priority:e.get("priority"),projectName:e.get("project"),completed:undefined,id:null};for(let r=0;r<n.length;r++)if(n[r].name==e.get("project")){n[r].addTodo(t),He(t);break}Ve(n)})(new FormData(e.target),Ke)})),document.getElementById("form-add-project").addEventListener("submit",(e=>{e.preventDefault();const n=new FormData(e.target),t=n.get("name"),r=document.querySelector("#form-add-project #name");let o=!0;for(let e=0;e<Ke.length;e++)Ke[e].name==t&&(o=!1);o?(r.setCustomValidity(""),((e,n)=>{const t=e.get("name"),r=Ze(t);n.push(r),(e=>{let n=localStorage.getItem("IDcounter");null==n&&(localStorage.setItem("IDcounter",0),n=0);let t=localStorage.getItem("projectIDs");t=null==t?[]:t.split(",");const r=++n;e.id=r,localStorage.setItem("IDcounter",n),t.push(r),localStorage.setItem("projectIDs",t);const o=e.name;localStorage.setItem("project"+r,o)})(r),Je(n)})(n,Ke)):(r.setCustomValidity("Project names must be unique."),r.reportValidity())})),r.addEventListener("click",(()=>{(()=>{const e=document.getElementById("sidebar"),n=document.getElementById("content");n.classList.contains("hide-sidebar")?(n.classList.remove("hide-sidebar"),e.classList.remove("hidden")):(n.classList.add("hide-sidebar"),e.classList.add("hidden"),e.style.transition="0.25s",n.style.transition="0.25s")})()})),e.addEventListener("click",(()=>{e.classList.contains("selected")||(Ge.classList.remove("selected"),Ge=e,e.classList.add("selected")),$e(Ke,"Today")})),n.addEventListener("click",(()=>{n.classList.contains("selected")||(Ge.classList.remove("selected"),Ge=n,n.classList.add("selected")),$e(Ke,"Upcoming")})),t.addEventListener("click",(()=>{t.classList.contains("selected")||(Ge.classList.remove("selected"),Ge=t,t.classList.add("selected")),$e(Ke,"HighPriority")}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,